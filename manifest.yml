type: install
version: 1.7
id: wordpress-deploy-from-git-by-id
name: WordPress-Deploy-From-Git Add-On
baseUrl: https://raw.githubusercontent.com/sych74/wordpress-git-addon/main
  
settings:
  fields:
  - name: gitRepoId
    caption: Git Repo Url
    type: string
    default: ''
    required: 'false'
    regexText: Incorrect URL. HTTPS link to Git repository is required.
  - name: gitBranch
    caption: Branch
    type: string
    default: master
    required: 'false'

globals:
  env_name: ${settings.env_name:wp-[fn.random]}
  project_name: ${settings.project_name:"stage"}
  envGroups: ${settings.envGroups:"test"}
  db_user: user-${fn.random}
  db_pass: ${fn.password(10)}

onInstall:
  - createEnvironment
  - backupConfigs
  - removeContext
  - deployContextById

actions:
  createEnvironment:
    - install:
        jps: https://raw.githubusercontent.com/jelastic-jps/wordpress/v2.2.0/manifest.yml?_r=${fn.random}
        envName: ${globals.env_name}
        loggerName: ${globals.env_name}
        settings:
          ls-addon: true
          waf: ${settings.waf:true}
          wp_protect: ${settings.wp_protect:true}
          le-addon: ${settings.le-addon:false}
          cdn-addon: ${settings.cdn-addon:false}
          mu-addon: false
          woocommerce: false
          success_email: false
          project: ${settings.project:default}
          projectScope: ${settings.projectScope:staging}
    
  backupConfigs:
    - script: | 
        var envInfo = jelastic.env.control.GetEnvInfo('${globals.env_name}', session);
        if (envInfo.result != 0) return envInfo;
        for (var i = 0, k = envInfo.nodes; i < k.length; i++) {
          if (k[i].nodeGroup == 'cp')
            master_id = k[i].id;
        }       
        var cmd1 = "[ ! -d /var/www/webroot/backup ] && mkdir -p /var/www/webroot/backup";
        var cmd2 = "[ -f /var/www/webroot/ROOT/wp-config.php ] && cp /var/www/webroot/ROOT/wp-config.php /var/www/webroot/backup";       
        return api.environment.control.ExecCmdById({
          envName: "${globals.env_name}", 
          session: session,
          nodeId: master_id, 
          commandList: toJSON([{"command": cmd1}, {"command": cmd2}])
        });
    
  removeContext:
    - api: jelastic.env.deployment.undeploy
      nodeGroup: cp
      envName: ${globals.env_name}
      context: ROOT

  deployContextById:
    - api: jelastic.env.deployment.deploy
      nodeGroup: cp
      envName: ${globals.env_name}
      context: ROOT
      repo:
        id: ${settings.repoId}
        branch: ${settings.branch}
